// <auto-generated />
using System;
using WebAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebAPI.Migrations
{
    [DbContext(typeof(CreanovelDbContext))]
    partial class CreanovelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebAPI.Models.Escena", b =>
                {
                    b.Property<Guid>("EscenaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identificador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NovelaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EscenaId");

                    b.HasIndex("NovelaId");

                    b.ToTable("Escenas");
                });

            modelBuilder.Entity("WebAPI.Models.Lectura", b =>
                {
                    b.Property<Guid>("LecturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NovelaRegistrosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioPropietarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LecturaId");

                    b.HasIndex("NovelaRegistrosId");

                    b.HasIndex("UsuarioPropietarioId");

                    b.ToTable("Lecturas");
                });

            modelBuilder.Entity("WebAPI.Models.LecturaRecursos", b =>
                {
                    b.Property<Guid>("LecturaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecursoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LecturaId", "RecursoId");

                    b.HasIndex("RecursoId");

                    b.ToTable("LecturaRecurso");
                });

            modelBuilder.Entity("WebAPI.Models.Novela", b =>
                {
                    b.Property<Guid>("NovelaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NovelaId");

                    b.HasIndex("UsuarioCreadorId");

                    b.ToTable("Novelas");
                });

            modelBuilder.Entity("WebAPI.Models.Recurso", b =>
                {
                    b.Property<Guid>("RecursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EscenaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PrimerRecurso")
                        .HasColumnType("bit");

                    b.Property<bool>("UltimoRecurso")
                        .HasColumnType("bit");

                    b.HasKey("RecursoId");

                    b.HasIndex("EscenaId");

                    b.ToTable("Recursos");
                });

            modelBuilder.Entity("WebAPI.Models.RecursoDecisionOpcion", b =>
                {
                    b.Property<Guid>("RecursoDecisionOpcionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OpcionMensaje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecursoDecisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SiguienteRecursoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecursoDecisionOpcionId");

                    b.HasIndex("RecursoDecisionId");

                    b.HasIndex("SiguienteRecursoId");

                    b.ToTable("RecursoDecisionOpciones");
                });

            modelBuilder.Entity("WebAPI.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebAPI.Models.RecursoConversacion", b =>
                {
                    b.HasBaseType("WebAPI.Models.Recurso");

                    b.Property<string>("Mensaje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SiguienteRecursoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("SiguienteRecursoId");

                    b.ToTable("RecursosConversacion");
                });

            modelBuilder.Entity("WebAPI.Models.RecursoDecision", b =>
                {
                    b.HasBaseType("WebAPI.Models.Recurso");

                    b.Property<string>("DecisionMensaje")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RecursosDecision");
                });

            modelBuilder.Entity("WebAPI.Models.Escena", b =>
                {
                    b.HasOne("WebAPI.Models.Novela", "Novela")
                        .WithMany("Escenas")
                        .HasForeignKey("NovelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Novela");
                });

            modelBuilder.Entity("WebAPI.Models.Lectura", b =>
                {
                    b.HasOne("WebAPI.Models.Novela", "NovelaRegistros")
                        .WithMany()
                        .HasForeignKey("NovelaRegistrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Usuario", "UsuarioPropietario")
                        .WithMany("Lecturas")
                        .HasForeignKey("UsuarioPropietarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NovelaRegistros");

                    b.Navigation("UsuarioPropietario");
                });

            modelBuilder.Entity("WebAPI.Models.LecturaRecursos", b =>
                {
                    b.HasOne("WebAPI.Models.Lectura", "Lectura")
                        .WithMany("Recursos")
                        .HasForeignKey("LecturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Recurso", "Recurso")
                        .WithMany("Lecturas")
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Lectura");

                    b.Navigation("Recurso");
                });

            modelBuilder.Entity("WebAPI.Models.Novela", b =>
                {
                    b.HasOne("WebAPI.Models.Usuario", "UsuarioCreador")
                        .WithMany("NovelasCreadas")
                        .HasForeignKey("UsuarioCreadorId");

                    b.Navigation("UsuarioCreador");
                });

            modelBuilder.Entity("WebAPI.Models.Recurso", b =>
                {
                    b.HasOne("WebAPI.Models.Escena", "Escena")
                        .WithMany("Recursos")
                        .HasForeignKey("EscenaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escena");
                });

            modelBuilder.Entity("WebAPI.Models.RecursoDecisionOpcion", b =>
                {
                    b.HasOne("WebAPI.Models.RecursoDecision", "RecursoDecision")
                        .WithMany("Opciones")
                        .HasForeignKey("RecursoDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Recurso", "SiguienteRecurso")
                        .WithMany()
                        .HasForeignKey("SiguienteRecursoId");

                    b.Navigation("RecursoDecision");

                    b.Navigation("SiguienteRecurso");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebAPI.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebAPI.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebAPI.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Models.RecursoConversacion", b =>
                {
                    b.HasOne("WebAPI.Models.Recurso", null)
                        .WithOne()
                        .HasForeignKey("WebAPI.Models.RecursoConversacion", "RecursoId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Recurso", "SiguienteRecurso")
                        .WithMany()
                        .HasForeignKey("SiguienteRecursoId");

                    b.Navigation("SiguienteRecurso");
                });

            modelBuilder.Entity("WebAPI.Models.RecursoDecision", b =>
                {
                    b.HasOne("WebAPI.Models.Recurso", null)
                        .WithOne()
                        .HasForeignKey("WebAPI.Models.RecursoDecision", "RecursoId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Models.Escena", b =>
                {
                    b.Navigation("Recursos");
                });

            modelBuilder.Entity("WebAPI.Models.Lectura", b =>
                {
                    b.Navigation("Recursos");
                });

            modelBuilder.Entity("WebAPI.Models.Novela", b =>
                {
                    b.Navigation("Escenas");
                });

            modelBuilder.Entity("WebAPI.Models.Recurso", b =>
                {
                    b.Navigation("Lecturas");
                });

            modelBuilder.Entity("WebAPI.Models.Usuario", b =>
                {
                    b.Navigation("Lecturas");

                    b.Navigation("NovelasCreadas");
                });

            modelBuilder.Entity("WebAPI.Models.RecursoDecision", b =>
                {
                    b.Navigation("Opciones");
                });
#pragma warning restore 612, 618
        }
    }
}
